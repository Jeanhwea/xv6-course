#+TITLE: 开启分页及 freelist 初始化
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-11-07 Tue>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil


* entry.S 阶段分页机制分析
xv6 在 entry.S 中开启分页

启用分页机制需要完成下面三步
1. 准备好页目录表和页表
2. 将页表地址写入控制寄存器 cr3
3. 将寄存器 cr0 的 PG 位置 1

[[file:../../study/os/xv6-public/entry.S]]

entry 阶段使用 CR4_PSE 的 4M 大页映射，这里的前提是做以下操作
1. 需要 Pentium 以上的 CPU
2. CR4 中的 PSE 位（第 4 位）为 1
3. 页目录项的 PS 位（第 7 位）为 1

通过 qemu 验证开启分页后
#+BEGIN_EXAMPLE
  (qemu) help info tlb
  info tlb  -- show virtual to physical memory mappings
  (qemu) help info mem
  info mem  -- show the active virtual memory mappings
  (qemu) info tlb
  0000000000000000: 0000000000000000 --P-A---W
  0000000080000000: 0000000000000000 --P-----W
  (qemu) info mem
  0000000000000000-0000000000400000 0000000000400000 -rw
  0000000080000000-0000000080400000 0000000000400000 -rw
  (qemu)
#+END_EXAMPLE

gdb 调试分页
#+BEGIN_EXAMPLE
  (gdb) b main
  Breakpoint 2 at 0x80103060: file main.c, line 20.
  (gdb) c
  Continuing.
  => 0x80103060 <main>:   lea    0x4(%esp),%ecx

  Thread 1 hit Breakpoint 2, main () at main.c:20
  20        kinit1(end, P2V(4*1024*1024)); // phys page allocator
  (gdb) info reg cr3
  cr3            0x109000            [ PDBR=265 PCID=0 ]
  (gdb) x/8x 0x109000
  0x109000:       0x000000a3      0x00000000      0x00000000      0x00000000
  0x109010:       0x00000000      0x00000000      0x00000000      0x00000000
  (gdb) p *(int *)0x109000
  $1 = 163
  (gdb) p/x *(int *)0x109000
  $2 = 0xa3
  (gdb) p/t *(int *)0x109000
  $3 = 10100011
  (gdb)
#+END_EXAMPLE

* kmem.freelist
1. kinit1 初始化内存
   - kmem.freelist 初始化链表
2. memset 初始化块内存
3. end 查看手册，获取 ~extern char end[];~ 细节
   #+BEGIN_SRC sh
     man 3 end
   #+END_SRC
