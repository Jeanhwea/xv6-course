#+TITLE: XV6 操作系统实践
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-10-24 Tue>
#+STARTUP: overview num indent

#+BEGIN_QUOTE
如果觉得讲解得好，请喝一杯咖啡也是极好的
#+END_QUOTE

[[file:img/pay.jpg]]

- Github [[https://github.com/Jeanhwea/xv6-course][link]]
- Gitee 镜像 [[https://gitee.com/jeanhwea/course-xv6][link]]

* 简介

XV6 是 MIT 开发的一个教学用的完整的类 Unix 操作系统，并且在 MIT 的操作系统课程
6.828 中使用
1. 它源自 Dennis Ritchie 和 Ken Thompson 的 Unix Version 6 (v6)
2. 通过阅读并理解 XV6 的代码，可以清楚地了解操作系统中众多核心的概念 (1w)
3. 目前 MIT XV6 操作系统支持 x86 和 riscv 两种体系结构

* 主题
- 序言
  1) [[file:01-x86-arch.org][x86 体系结构]] | [[https://www.bilibili.com/video/BV1cw411z7Ro][视频 01]]
  2) [[file:02-qemu-simulator.org][QEMU 模拟器]] | [[https://www.bilibili.com/video/BV1me411R7MN][视频 02]]
  3) [[file:03-minimal-os.org][编写最小操作系统]] | [[https://www.bilibili.com/video/BV1Fe411975E][视频 03]]
- 走进操作系统
  1) [[file:11-os-overview.org][操作系统概览]] | [[https://www.bilibili.com/video/BV1vu4y1h7mR/][视频 11]]
  2) [[file:12-from-asm-to-c.org][从汇编到 C 语言]] | [[https://www.bilibili.com/video/BV1hM411Q7eb/][视频 12]] | [[https://www.bilibili.com/video/BV1a94y1G7HV/][补充视频 12a]]
  3) [[file:13-xv6-startup.org][xv6 启动流程分析]] | [[https://www.bilibili.com/video/BV1az4y1A7zU/][视频 13]]
- 内存管理
  1) [[file:21-page-table.org][x86 体系结构分页机制]] | [[https://www.bilibili.com/video/BV1CC4y1778j/][视频 21]]
  2) [[file:22-mem-init.org][开启分页及 freelist 初始化]] | [[https://www.bilibili.com/video/BV1bQ4y1n7iE/][视频 22]]
  3) [[file:23-kmem-pgtab.org][内核页表初始化]] | [[https://www.bilibili.com/video/BV1Ew411x77A/][视频 23]] | [[https://www.bilibili.com/video/BV1ng4y19751/][视频 23a]]
- 进程管理
  1) [[file:31-intro-process.org][进程创建]] | [[https://www.bilibili.com/video/BV1Nz4y1A7BW/][视频 31]]
  2) [[file:32-init-start.org][scheduler 启动及 switchuvm 切换用户态地址空间]] | [[https://www.bilibili.com/video/BV1fu4y1N7D4/][视频 32]]
  3) [[file:33-context-switch.org][swtch上下文切换及内核态执行]] | [[https://www.bilibili.com/video/BV11g4y1Q7Ux/][视频 33]]
  4) [[file:34-enter-shell.org][从 initcode 到 shell 启动]]
- TODO 文件系统

* 答疑
** 视频(编号 11) 中的地址空间看起来有问题？
有粉丝对 0x0 ~ 0x80000000 的地址空间存在疑问，认为 0x0 以上是外设程序？
#+BEGIN_EXAMPLE
  0x80000000 -> |-------------|  -
  (KERNBASE)    |     Heap    |  ^
                |      |      |  |
                |      v      |  |
                |     ...     |  |
                |             |
                |-------------| User Space
                |     ...     |
                |      ^      |
                |      |      |  |
                |  User stack |  |
                |-------------|  |
                |             |  |
                |    User     |  |
                | Text & Data |  v
  0x0        -> |-------------|  -
#+END_EXAMPLE

我这边理解可能架构没有对齐问题
- 因为 ta 参考的是 riscv 架构，和 i386 可能存在差异
- 如果 BIOS 代码中断向量和一些 BIOS 处理流程我这边可以粗略地认为是用户代码
- 实际的用户程序通过加载到内存精确地说肯定不是从 0x0 开始，应该可以使用下面命令
  验证一下
#+BEGIN_SRC sh :results output :exports both
  readelf -l ./lab/09-linux-syscall/forkme.out | grep Entry
#+END_SRC

#+RESULTS:
: Entry point 0x1120


** 为什么视频编码看起来不是连续的？
视频顺序采用三段式来编码，具体含义如下
#+BEGIN_EXAMPLE
  xyz-描述
  ^``
  | ` `- 番外号, z := null|a|b|c
  | |
  | +--- 节编号, y := 1|2|3|...
  |
  +----- 章编号, z := 0|1|2|...
#+END_EXAMPLE

最终结果是视频会根据字典序来排布

* 资源
1. MIT 课程官网 [[https://pdos.csail.mit.edu/6.828/2018/][6.828]]
2. x86 版本 [[https://github.com/mit-pdos/xv6-public][xv6-public]]
3. riscv 版本 [[https://github.com/mit-pdos/xv6-riscv][xv6-riscv]]
4. gas 手册 [[https://sourceware.org/binutils/docs/as/index.html][gas]]
5. Unix 源代码 [[https://www.tuhs.org/][Unix Heritage Society]]
