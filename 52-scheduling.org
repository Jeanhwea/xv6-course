#+TITLE: 调度
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-11-23 Thu>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil
#+PROPERTY: header-args:sh :results output :dir ../../study/os/xv6-public


* 调度 sched / scheduler
** sched()
sched() 主要目的是要将进程上下文切换到 mycpu()->scheduler
1. 通常一段程序代码的执行被称为 thread
   - 如果在内核态执行，为 kernel thread
   - 否则在用户态执行，为 user thread
2. sched() 调用的条件是：
   - 进程释放其他持有的锁
   - 持有 ptable.lock
   - 并且修改了 p->state 状态
   - 调用 sched() 来调度进程
3. 传递 intena 位,因为 intena 是 thread 的属性，而非 CPU 的

** 调度流程
1. 获取 ptable.lock, 释放其他锁
   - 这里保证在调用 swtch 时, 进程 p 的 state 和 context 不会被修改
   - 释放其他锁确保在进程切换时不会出现死锁
2. 修改 p->state = RUNNABLE
3. 调用 sched()

** kernel/user 状态切换点
1. kernel thread 唯一让出 CPU 的执行点就是 ~sched()~
2. 一旦 sched 让出 CPU 后续进入 kernel thread 的点在 ~scheduler()~ 函数的调度
3. 这也是 swtch 的两个调用的地方

** yield 主动让出 CPU
[[file:../../study/os/xv6-public/proc.c::yield(void)]]

1. yield 获取 ptable.lock
2. 然后通过调用 sched() 主动释放 CPU

* 调度中锁的使用
1. 在遍历 ptable 是先获取 ptable.lock
2. 如果没有可调度的进程 (RUNNABLE), 则 Round Robin 结束后释放锁
3. 否则出现上下文切换 swtch
   - 这时会在 forkret 中释放 ptable.lock 锁
   - 后续如果进程调用 ~sched()~, 根据之前的推导则又持有锁
     + 通常在 ~yield()~ 中获取
     + 也有在 ~sleep()~ 中获取, 通过 spinlock 转换成 ptable.lock
   - 如此反复，不会出现死锁

* Sleep & Wakeup
sleep 和 wakeup 是一对系统调用，其工作方式如下
1. sleep 设置 p->state = SLEEPING, 然后调用 sched 释放 CPU
   - 让进程在任意的 chan 上休眠，称之为等待队列（wait channel）
   - sleep 让调用进程休眠，释放所占 CPU
3. wakeup(chan) 则唤醒在 chan 上休眠的所有进程
   - 让他们的 sleep 调用返回
   - 如果没有进程在 chan 上等待唤醒，wakeup 就什么也不做
