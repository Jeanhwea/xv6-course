#+TITLE: 系统调用流程分析
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-11-17 Fri>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil
#+PROPERTY: header-args:sh :results output :dir ../../study/os/xv6-public

* syscall 到 exec 调用
1. syscall() 处理系统调用
   - 获取当前执行进程
   - 从系统调用表 syscalls 中调用系统调用函数 sys_exec
2. sys_exec
   - 检查, 并从栈上获取参数
   - 命令行路径 path
   - 获取 argv
   - 调用 exec
3. exec
   - path = "/init"
   - argv = {"/init", \0, ... }, len=32

* exec() 系统调用
#+BEGIN_SRC c
  void exec(init, argv)
#+END_SRC

1. 创建用户地址空间
2. 从磁盘加载 path 文件, 到内存中
   - 打开文件, namei
   - 申请页目录 setupkvm
   - 读取 ELF 头, readi
     #+BEGIN_SRC sh :results output :exports both
       readelf -h _init
     #+END_SRC

     #+RESULTS:
     #+begin_example
     ELF Header:
       Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
       Class:                             ELF32
       Data:                              2's complement, little endian
       Version:                           1 (current)
       OS/ABI:                            UNIX - System V
       ABI Version:                       0
       Type:                              EXEC (Executable file)
       Machine:                           Intel 80386
       Version:                           0x1
       Entry point address:               0x0
       Start of program headers:          52 (bytes into file)
       Start of section headers:          14252 (bytes into file)
       Flags:                             0x0
       Size of this header:               52 (bytes)
       Size of program headers:           32 (bytes)
       Number of program headers:         2
       Size of section headers:           40 (bytes)
       Number of section headers:         18
       Section header string table index: 17
     #+end_example
   - 解析代码段, allocuvm/loaduvm/readi
     #+BEGIN_SRC sh :results output :exports both
       readelf -l _init
     #+END_SRC

     #+RESULTS:
     #+begin_example

     Elf file type is EXEC (Executable file)
     Entry point 0x0
     There are 2 program headers, starting at offset 52

     Program Headers:
       Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
       LOAD           0x000080 0x00000000 0x00000000 0x00b2c 0x00b38 RWE 0x10
       GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10

      Section to Segment mapping:
       Segment Sections...
        00     .text .rodata .eh_frame .data .bss
        01
     #+end_example
3. 初始化用户堆栈 ustack
   - 设置参数 args, copyout
   - ustack 前 3 个分别是: fake pc, argc, argv pointer
4. 提交用户态，跳转用户态, switchuvm
   - elf.entry
   - pgdir
   - eip/esp

_init 用户虚拟地址空间
#+BEGIN_EXAMPLE
  0x3000 |--------------| <- sp
         | \0 \0 \0 t   |
         |  i n  i  /   |
         | \0           |
         | argv1        |
         | argv         |
         | argc         |
         | fake pc      | <- sp 0x2fe4
         |              |
         |              |
         |              |
         |              |
  0x2000 |--------------|
         |xxxxxxxxxxxxxx|
         |xxxxxxxxxxxxxx|
         |xxxxxxxxxxxxxx|
         |xxxxxxxxxxxxxx|
         |xxxxxxxxxxxxxx|
         |xxxxxxxxxxxxxx|
  0x1000 |--------------|
         |              |
         |              |
         |              |
  0x0b38 |--------------| <- end
         |   _init      |
         | Text  & Data |
  0x0    |--------------| <- entry
#+END_EXAMPLE

* Note
当前
cr3 - pgdir -> 0xdffe000
ustack[] , len=3+32+1, addr=0x8dfffe00


目标
#+BEGIN_EXAMPLE
  pgdir -> 0x8dfbb000

  0x3000 |--------------| <- sp
         | \0 \0 \0 t   |
         |  i n  i  /   |
         | \0           |
         | *argv1       |
         | **argv       |
         | argc (1)     |
         | fake pc      | <- sp 0x2fe4
         |              |
         |              |
         |              |
         |              |
  0x2000 |--------------|
         | xxxxxxxxxxxx |
         | xxxxxxxxxxxx |
         | xxxxxxxxxxxx |
         | xxxxxxxxxxxx |
         | xxxxxxxxxxxx |
         | xxxxxxxxxxxx |
  0x1000 |--------------|
         |              |
         |              |
         |              |
  0x0b38 |--------------| <- end
         |   _init      |
         | Text  & Data |
  0x0    |--------------| <- entry
#+END_EXAMPLE
