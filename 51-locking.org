#+TITLE: 同步与锁
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-11-23 Thu>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil
#+PROPERTY: header-args:sh :results output :dir ../../study/os/xv6-public


* 数据竞争
count 自增
1. 无锁 [[file:lab/15-locking/no-lock.c]]
2. 有锁 [[file:lab/15-locking/lock.c]]

* 汇编指令执行简述
#+BEGIN_SRC asm
  inc $eax
#+END_SRC

x86 汇编 CPU 执行流程分析
1. Fetch Instruction
2. Decode Instruction
3. Memory Access
4. Execute
5. Write Back

#+BEGIN_EXAMPLE
      t: 0   1   2   3   4   5   6
         -----------------------------
  CPU1:  |F  |   |   |   |   |   |   |
         |   |D  |   |   |   |   |   |
         |   |   |M  |   |   |   |   |
         |   |   |   |E  |   |   |   |
         |   |   |   |   |W  |   |   |
         |   |   |   |   |   |   |   |
         -----------------------------
  CPU2:  |   |F  |   |   |   |   |   |
         |   |   |D  |   |   |   |   |
         |   |   |   |M  |   |   |   |
         |   |   |   |   |E  |   |   |
         |   |   |   |   |   |W  |   |
         |   |   |   |   |   |   |   |
         -----------------------------
#+END_EXAMPLE

* 锁 Lock
Spin Lock
[[file:../../study/os/xv6-public/spinlock.h]]
#+BEGIN_SRC c
  // Mutual exclusion lock.
  struct spinlock {
    uint locked;       // Is the lock held?

    // For debugging:
    char *name;        // Name of lock.
    struct cpu *cpu;   // The cpu holding the lock.
    uint pcs[10];      // The call stack (an array of program counters)
                       // that locked the lock.
  };
#+END_SRC

Sleep Lock
[[file:../../study/os/xv6-public/sleeplock.h]]

xv6 中的锁
#+BEGIN_SRC sh :results output
  rg initlock $PWD
#+END_SRC

#+RESULTS:
#+begin_example
/data/gitana/study/os/xv6-public/kalloc.c:  initlock(&kmem.lock, "kmem");
/data/gitana/study/os/xv6-public/spinlock.c:initlock(struct spinlock *lk, char *name)
/data/gitana/study/os/xv6-public/fs.c:  initlock(&icache.lock, "icache");
/data/gitana/study/os/xv6-public/proc.c:  initlock(&ptable.lock, "ptable");
/data/gitana/study/os/xv6-public/sleeplock.c:  initlock(&lk->lk, "sleep lock");
/data/gitana/study/os/xv6-public/defs.h:void            initlock(struct spinlock*, char*);
/data/gitana/study/os/xv6-public/console.c:  initlock(&cons.lock, "console");
/data/gitana/study/os/xv6-public/bio.c:  initlock(&bcache.lock, "bcache");
/data/gitana/study/os/xv6-public/ide.c:  initlock(&idelock, "ide");
/data/gitana/study/os/xv6-public/pipe.c:  initlock(&p->lock, "pipe");
/data/gitana/study/os/xv6-public/file.c:  initlock(&ftable.lock, "ftable");
/data/gitana/study/os/xv6-public/log.c:  initlock(&log.lock, "log");
/data/gitana/study/os/xv6-public/trap.c:  initlock(&tickslock, "time");
#+end_example
