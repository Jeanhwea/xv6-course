#+TITLE: 同步与锁
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-11-23 Thu>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil
#+PROPERTY: header-args:sh :results output :dir ../../study/os/xv6-public


* 数据竞争
count 自增
1. 无锁
2. 有锁

* 汇编指令执行简述
#+BEGIN_SRC asm
  inc $eax
#+END_SRC

x86 汇编 CPU 执行流程分析
1. Fetch Instruction
2. Decode Instruction
3. Memory Access
4. Execute
5. Write Back

#+BEGIN_EXAMPLE
      t: 0   1   2   3   4   5   6
         -----------------------------
  CPU1:  |F  |   |   |   |   |   |   |
         |   |D  |   |   |   |   |   |
         |   |   |M  |   |   |   |   |
         |   |   |   |E  |   |   |   |
         |   |   |   |   |W  |   |   |
         |   |   |   |   |   |   |   |
         -----------------------------
  CPU2:  |   |F  |   |   |   |   |   |
         |   |   |D  |   |   |   |   |
         |   |   |   |M  |   |   |   |
         |   |   |   |   |E  |   |   |
         |   |   |   |   |   |W  |   |
         |   |   |   |   |   |   |   |
         -----------------------------
#+END_EXAMPLE

* 锁 Lock
** Spin Lock 自旋锁
[[file:../../study/os/xv6-public/spinlock.h]]
#+BEGIN_SRC c
  // Mutual exclusion lock.
  struct spinlock {
    uint locked;       // Is the lock held?

    // For debugging:
    char *name;        // Name of lock.
    struct cpu *cpu;   // The cpu holding the lock.
    uint pcs[10];      // The call stack (an array of program counters)
                       // that locked the lock.
  };
#+END_SRC

#+BEGIN_SRC sh :results output :exports both
  rg -n initlock $PWD | sort
#+END_SRC

#+RESULTS:
#+begin_example
/data/gitana/study/os/xv6-public/bio.c:43:  initlock(&bcache.lock, "bcache");
/data/gitana/study/os/xv6-public/console.c:289:  initlock(&cons.lock, "console");
/data/gitana/study/os/xv6-public/defs.h:130:void            initlock(struct spinlock*, char*);
/data/gitana/study/os/xv6-public/file.c:22:  initlock(&ftable.lock, "ftable");
/data/gitana/study/os/xv6-public/fs.c:176:  initlock(&icache.lock, "icache");
/data/gitana/study/os/xv6-public/ide.c:55:  initlock(&idelock, "ide");
/data/gitana/study/os/xv6-public/kalloc.c:34:  initlock(&kmem.lock, "kmem");
/data/gitana/study/os/xv6-public/log.c:60:  initlock(&log.lock, "log");
/data/gitana/study/os/xv6-public/pipe.c:37:  initlock(&p->lock, "pipe");
/data/gitana/study/os/xv6-public/proc.c:26:  initlock(&ptable.lock, "ptable");
/data/gitana/study/os/xv6-public/sleeplock.c:16:  initlock(&lk->lk, "sleep lock");
/data/gitana/study/os/xv6-public/spinlock.c:13:initlock(struct spinlock *lk, char *name)
/data/gitana/study/os/xv6-public/trap.c:26:  initlock(&tickslock, "time");
#+end_example

1. acquire 获取锁
2. release 释放锁

** Sleep Lock 睡眠锁
[[file:../../study/os/xv6-public/sleeplock.h]]

#+BEGIN_SRC sh :results output :exports both
  rg -n initsleeplock $PWD | sort
#+END_SRC

#+RESULTS:
: /data/gitana/study/os/xv6-public/bio.c:51:    initsleeplock(&b->lock, "buffer");
: /data/gitana/study/os/xv6-public/defs.h:139:void            initsleeplock(struct sleeplock*, char*);
: /data/gitana/study/os/xv6-public/fs.c:178:    initsleeplock(&icache.inode[i].lock, "inode");
: /data/gitana/study/os/xv6-public/sleeplock.c:14:initsleeplock(struct sleeplock *lk, char *name)


Sleep Lock 死锁场景
#+BEGIN_EXAMPLE
  S: Sleep Lock
  X: Spin Lock
  a: acquire
  r: release

  TIME
  --------------------------- Long Time --------------------------->
  T1:(S)| (S/a)  |    (S/r)      ...       (S/a)           |
     (X)|        |               ...          (X/a)        |
        |        |               ...            x          |
        |        |               ...            x          |
        |        |               ...            x          |
        |        |               ...            x          |
  T2:(S)|        |               ...            (S/a)      |
     (X)|        |(X/a)          ...            x          |
        |        |               ...            x          |
        |        |               ...            x          |
        |        |               ...            x          |
        |        |               ...            x          |
#+END_EXAMPLE
