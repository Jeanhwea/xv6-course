#+TITLE: sleeplock 与死锁
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-11-26 Sun>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil
#+PROPERTY: header-args:sh :results output :dir ../../study/os/xv6-public

* Spin Lock 回顾
1. acquire
2. release
3. 并发编程
   - mutex
   - atomic

* Sleep Lock 睡眠锁
1. 磁盘 IDE 读写
   - 慢
   - 依赖 interrupt
2. disk 竞争
   - spinlock ???
     + while loop
3. sleeplock 睡眠锁
   - spinlock 内涵
   - locked 记录是否上锁

[[file:../../study/os/xv6-public/sleeplock.h]]

#+BEGIN_SRC sh :results output :exports both
  rg -n initsleeplock $PWD | sort
#+END_SRC

#+RESULTS:
: /data/gitana/study/os/xv6-public/bio.c:51:    initsleeplock(&b->lock, "buffer");
: /data/gitana/study/os/xv6-public/defs.h:139:void            initsleeplock(struct sleeplock*, char*);
: /data/gitana/study/os/xv6-public/fs.c:178:    initsleeplock(&icache.inode[i].lock, "inode");
: /data/gitana/study/os/xv6-public/sleeplock.c:14:initsleeplock(struct sleeplock *lk, char *name)

* Sleep Lock 死锁场景
1. 死锁 deadlock
2. 经典案例
   - 生产者/消费者
   - 哲学家
#+BEGIN_EXAMPLE
  S: Sleep Lock
  X: Spin Lock
  a: acquire
  r: release

  分析流程:
  TIME
  --------------------------- Long Time --------------------------->
  T1:(S)|  (S/a) |     (S/r)     ...      (S/a)            |
     (X)|        |               ...         (X/a)         |
        |        |               ...            x          |
        |        |               ...            x          |
        |        |               ...            x          |
        |        |               ...            x          |
  T2:(S)|        |               ...            (S/a)      |
     (X)|        |(X/a)          ...            x          |
        |        |               ...            x          |
        |        |               ...            x          |
        |        |               ...            x          |
        |        |               ...            x          |

                                                T1: hold S, wait X
                                                T2: hold X, wait S
#+END_EXAMPLE

* Sleep Lock 实现
1. 获取锁 acquiresleep
2. 释放锁 releasesleep
3. acquiresleep/releasesleep
   - 包裹 spinlock: acquire/release
