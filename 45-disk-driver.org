#+TITLE: 磁盘驱动
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-11-21 Tue>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil
#+PROPERTY: header-args:sh :results output :dir ../../study/os/xv6-public

* 说明
1. driver hardware
2. disk/memory/mouse/keyboard

* 思路
1. idequeue 缓冲队列
   - 磁盘慢, r/w 发送请求
2. 响应, 中断响应函数
3. struct buf 表示一块数据
   1) prev/next 双向链表
   2) qnext 请求缓冲队列
   3) data
      + BSIZE 512
      + xv6 1 data = 1 sector, 1 data = N sector
   4) sector 扇区
      + SECTOR_SIZE 512
4. iderw
   - idestart 发送磁盘请求 r/w
   - r/w
     - flag dirty write
     - otherwise  read
5. ideintr
   - 中断响应 insl 0x1f0
6. read
   - idestart read_cmd
   - ideintr  insl 0x1f0
7. write
   - idestart write_cmd && outsl 0x1f0
   - ideintr  b->flags &= ~B_DIRTY

查看 IDE 控制器
#+BEGIN_EXAMPLE
  (qemu) info pci
    Bus  0, device   0, function 0:
      Host bridge: PCI device 8086:1237
        PCI subsystem 1af4:1100
        id ""
    Bus  0, device   1, function 0:
      ISA bridge: PCI device 8086:7000
        PCI subsystem 1af4:1100
        id ""
    Bus  0, device   1, function 1:
      IDE controller: PCI device 8086:7010
        PCI subsystem 1af4:1100
        BAR4: I/O at 0xc040 [0xc04f].
        id ""
    Bus  0, device   1, function 3:
      Bridge: PCI device 8086:7113
        PCI subsystem 1af4:1100
        IRQ 9, pin A
        id ""
  ....
#+END_EXAMPLE

* 磁盘设计思路 iderw
1. 磁盘的访问相对于 CPU 的指令计算速度来说非常慢
2. ide 驱动维护一个 idequeue 的缓存队列
3. 通过 iderw 来同步 idequeue 的队列到磁盘中
4. iderw 将缓冲区 b 送到队列的末尾
   - 如果这个缓冲区在队首，iderw 通过 idestart 将它送到磁盘上
   - 否则，一个缓冲区被开始处理当且仅当它前面的缓冲区被处理完

* 实际情况
1. 想要完美的支持所有的设备需要投入大量的工作
2. 这是因为各种各样的设备有各种各样的特性
3. 设备和驱动之间的协议有时会很复杂
4. 在很多操作系统当中，各种驱动合起来的代码数量要比系统内核的数量更多
