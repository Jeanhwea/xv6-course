#+TITLE: x86 体系结构分页机制
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-11-06 Mon>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil


* 分页机制
1. 内核和用户的代码都是 virtual address
2. 页目录和页表中包含 1024 个目录项 PTE (page table entry)
   - PPN (physical page number), 20 位的物理页码
   - Flags, 12 位
3. 第一步从 cr3 寄存器中获取页目录 page directory
4. va.dir 索引 page directory 获取到页表 page table
5. page directory / page table 包含 1024 个 PTE
   - 这段连续内存大小位 1024 * 4 byte = 4KB
   - 这 4KB 又叫页 page
6. va.table 索引 page table 获取到物理地址到 PPN
#+BEGIN_EXAMPLE
                              +--------------------------------------------+
                              |                                            |
  Virtual Address             |                Physical Address            v
  +----------------------------------+         +----------------------------------+
  | Dir(10) | Table(10) | Offset(12) |         | PPN (20)            | Offset(12) |
  +----------------------------------+         +----------------------------------+
      |          |                                 ^
      |          |                                 |
      |          |                                 |
      |          |                       1023 |----+---------------|
      |          |                            |    |    |          |
      |          |                            | PPN(20) | Flag(12) |
      |          |                            |         |          |
      |          |                            | 0x81    |          |
      |          +----------------------->  2 | 0x43    |          |
      |                                     1 | 0       |          |
      |            +--------------------->  0 |--------------------|
      |            |                                 PAGE TABLE
      |            |
      |            |
      |            |                                      1023 |------------|
      |  1023 |----+---------------|                           |     |      |
      |       |    |    |          |                           | PPN | Flag |
      |       | PPN(20) | Flag(12) |                           |     |      |
      |       |         |          |                         2 |     |      |
      |       |         |          |                         1 | 0   |      |
      `-->  2 | 0x23 ---+----------+---------------------->  0 |------------|
            1 | 0x10    |          |
  cr3 --->  0 |--------------------|
                  PAGE DIRECTORY
#+END_EXAMPLE

* x86 的寻址模式
1. 虚拟地址/逻辑地址 logic address
   - 编译器产生的地址
2. 线性地址 linear address
   - CPU 加载程序后，会为这个程序分配内存，通过分段产生的地址
   - 段基址 + 逻辑地址 = 线性地址
3. 物理地址 physical address
   - 硬件真实的内存地址
   - 如果没有开启分页, pa = la
   - 开启分页后，la 经过硬件转换才能得到 pa

#+BEGIN_EXAMPLE
       [  CPU  ]
         |   |
         |   |  (Logic Address)
         |   |
         v   v
  [Segment Translation] (Selector/Offset/gdtr)
         |   |
         |   |  (Linear Address)
         |   |
         v   v
  [  Page Translation ] (Paging/cr3/PD/PT)
         |   |
         |   |  (Physical Address)
         |   |
         v   v
      [  Memory  ]
#+END_EXAMPLE

* 分页代码实验
[[file:../../study/os/xv6-public/mmu.h]]

#+BEGIN_SRC c
  // A virtual address 'la' has a three-part structure as follows:
  //
  // +--------10------+-------10-------+---------12----------+
  // | Page Directory |   Page Table   | Offset within Page  |
  // |      Index     |      Index     |                     |
  // +----------------+----------------+---------------------+
  //  \--- PDX(va) --/ \--- PTX(va) --/

  // page directory index
  #define PDX(va)         (((uint)(va) >> PDXSHIFT) & 0x3FF)

  // page table index
  #define PTX(va)         (((uint)(va) >> PTXSHIFT) & 0x3FF)
#+END_SRC
