#+TITLE: inode 层介绍
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-12-03 Sun>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil
#+PROPERTY: header-args:sh :results output :dir ../../study/os/xv6-public


* inode 数据结构

[[file:img/inode-relation.dot.png]]

inode 例子
#+BEGIN_EXAMPLE
  /tmp $ mkdir test
  /tmp $ cd test
  /tmp/test $ ls
  /tmp/test $ touch aaa
  /tmp/test $ ll -i
  total 0
  3933261 -rw-rw-r-- 1 mes mes 0 Dec  6 15:44 aaa
  /tmp/test $ touch bbb
  /tmp/test $ ll -i
  total 0
  3933261 -rw-rw-r-- 1 mes mes 0 Dec  6 15:44 aaa
  3933263 -rw-rw-r-- 1 mes mes 0 Dec  6 15:44 bbb
  /tmp/test $ ln aaa ccc
  /tmp/test $ ls -i
  3933261 aaa  3933263 bbb  3933261 ccc
  /tmp/test $ ll -i
  total 0
  3933261 -rw-rw-r-- 2 mes mes 0 Dec  6 15:44 aaa
  3933263 -rw-rw-r-- 1 mes mes 0 Dec  6 15:44 bbb
  3933261 -rw-rw-r-- 2 mes mes 0 Dec  6 15:44 ccc
  /tmp/test $ stat ccc
    File: ccc
    Size: 0               Blocks: 0          IO Block: 4096   regular empty file
  Device: fd00h/64768d    Inode: 3933261     Links: 2
  Access: (0664/-rw-rw-r--)  Uid: ( 1000/     mes)   Gid: ( 1000/     mes)
  Access: 2023-12-06 15:44:02.257552590 +0800
  Modify: 2023-12-06 15:44:02.257552590 +0800
  Change: 2023-12-06 15:44:23.713551331 +0800
   Birth: 2023-12-06 15:44:02.257552590 +0800
  /tmp/test $
#+END_EXAMPLE

1. dinode
   - type: file/directory/device
   - nlink link 数量
   - size 文件大小
   - addrs 数据块地址
2. inode
   - inum
   - ref 内存中引用 inode 计数

* block 分配器
1. 文件和目录的内容都存放在磁盘块 block 中
2. block 都是从空闲池中获取的数据
   - 磁盘中有一个 block 空闲位图 freebitmap
   - 每一位表示一个 block 是否空闲
3. sb.size 表示文件系统块总数
4. BSIZE
   - 通常 block 要比 buf 大
   - 但是 xv6 中, 1 block = 1 buf = BSIZE = 512
5. balloc 分配一个新的磁盘块 block
6. bfree 释放一个磁盘块

* inode 内存操作
1. inode 描述一个匿名的文件
2. 分配
   - ialloc() 分配 inode
     + 创建文件时调用
   - iput() 当 ref/link count 为零时, 清理 inode
3. iget()/iput()
   - ip->ref 表示 inode 的引用计数
   - iget() 创建 inode, 或者增加 ref
   - iput() 清理 inode
4. 合法性 ip->valid
   - ilock() 从磁盘读取 inode 数据, 并设置 ip->valid=1
   - iput() 当 ip->ref=0 时, 清理 ip->valid
5. bmap

* inode 读写
1. readi 读取 inode 数据
   - iget() 获取 inode
   - ilock() 读取数据
2. writei 写入 inode 数据
