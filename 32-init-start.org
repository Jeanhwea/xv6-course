#+TITLE: scheduler 启动及 switchuvm 切换用户态地址空间
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2023-11-14 Tue>
#+STARTUP: overview num indent
#+OPTIONS: ^:nil
#+PROPERTY: header-args:sh :results output :dir ../../study/os/xv6-public


* 唤醒首个进程
mpmain 完成初始化并启动 scheduler
1. idtinit 加载 IDT (中断描述符表)
   #+BEGIN_SRC c
     struct gatedesc idt[256];
   #+END_SRC
2. xchg 设置 CPU 启动
3. scheduler() 执行调度

* scheduler 进程调度
scheduler 目的是调度进程 p 到 cpu 上执行

1. scheduler 不返回，是一个死循环
2. 查找 RUNNABLE 进程，等待调度
   - 当前 mycpu()
   - 轮训 ptable.proc ，调度算法 RR (Round ribbon)
   - 当前可执行进程 p
3. switchuvm 用户态执行
4. 设置 p->state = RUNNING
5. swtch(...) 执行程序
6. switchkvm 执行内核态

* switchuvm 用户态地址空间
1. 关中断 pushcli
2. 切换 TSS 段 (Task Status Segment)
   - TSS Descriptor 提供硬件级的进程切换机制
   - TSS 是一段内存区域，存放进程相关的执行环境信息
   - 初始化的 TSS 是由用户提供，进程切换时的保存信息由 processor 执行
   - TSS selector => TR 寄存器，其结构与 segment registers 是完全一致的
   - ltr 指令
     1) 使用提供的 selector 在 GDT / LDT 里索引查找 TSS descriptor
     2) 查找结果加载到 TR 寄存器里
     #+BEGIN_EXAMPLE
       (qemu) info registers
       TR =0000 00000000 0000ffff 00008b00 DPL=0 TSS32-busy
       (qemu) info registers
       TR =0028 801117a8 00000067 00408900 DPL=0 TSS32-avl
     #+END_EXAMPLE
3. 切换页表
   - lcr3 加载 p->pgdir 的页目录
4. 开中断 popcli, 让中断控制器调度进程运行
